{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\makda\\\\Desktop\\\\UW coding bootcamp\\\\week19\\\\Memory-Game\\\\clicky\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Header from \"./components/header\";\nimport Navbar from \"./components/navbar\";\nimport Footer from \"./components/footer\";\nimport Geez from \"./components/geez\";\nimport json from \"./geezNums.json\";\nimport _ from 'underscore';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0,\n      topScore: 0,\n      clickedArray: [],\n      message: \"click on a Ge'ez number to start!\"\n    };\n\n    this.clickPicture = cickedId => {\n      // Arrange the pictures in a random manner\n      // const shuffledArray = this.shuffleArray(cards);\n      // this.setState({ cards: shuffledArray });\n      // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n      if (this.state.clickedArray.includes(cickedId)) {\n        this.setState({\n          count: 0,\n          clickedArray: [],\n          message: \"Oops!! Game Over. Restart page or Click an image to start again!\"\n        });\n      } else {\n        this.setState({\n          clickedArray: this.state.clickedArray.concat([cickedId]),\n          count: this.state.count + 1,\n          message: \"YAY!!\"\n        });\n      } // set topscore = score if score>topscore.\n\n\n      if (this.state.count > this.state.topScore) {\n        this.setState({\n          topScore: this.state.count\n        });\n      }\n    };\n  }\n\n  // constructor(props) {\n  //     super(props);\n  //     this.state = {count: 0};\n  //     // This binding is necessary to make `this` work in the callback\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  // }\n  // --------------------\n  //function that resets game by setting score=0 \n  // newGame(){\n  //     this.setState({count: 0})\n  // }\n  // =====================\n  handleIncrement() {\n    // We always use the setState method to update a component's state\n    this.setState({\n      count: this.state.count + 1\n    }); // alert(this.state.count)\n  }\n\n  //  setState for the geez\n  render() {\n    var Cards = []; // loops through the geezNums.json and renders images\n\n    for (let index = 0; index < json.length; index++) {\n      Cards.push(React.createElement(Geez, {\n        image: json[index].image,\n        name: json[index].name,\n        label: json[index].label // TODO map out onclick function in console\n        ,\n        onClick: this.clickPicture,\n        key: json[index].id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }));\n    } //using underscore.js for the shuffle functionality to shuffle the cards everytime on of them gets clicked\n\n\n    Cards = _.shuffle(Cards);\n    console.log(Cards);\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"score=\", this.state.count, \"message=\", this.state.message, \"topScore=\", this.state.topScore))), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, Cards), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/makda/Desktop/UW coding bootcamp/week19/Memory-Game/clicky/src/App.js"],"names":["React","Component","Header","Navbar","Footer","Geez","json","_","App","state","count","topScore","clickedArray","message","clickPicture","cickedId","includes","setState","concat","handleIncrement","render","Cards","index","length","push","image","name","label","id","shuffle","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Header from \"./components/header\";\r\nimport Navbar from \"./components/navbar\";\r\nimport Footer from \"./components/footer\";\r\nimport Geez from \"./components/geez\";\r\nimport json from \"./geezNums.json\";\r\nimport _ from 'underscore';\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        count: 0,\r\n        topScore: 0,\r\n        clickedArray: [],\r\n        message: \"click on a Ge'ez number to start!\"\r\n    };\r\n    \r\n    // constructor(props) {\r\n    //     super(props);\r\n    //     this.state = {count: 0};\r\n    \r\n    //     // This binding is necessary to make `this` work in the callback\r\n    //     this.handleIncrement = this.handleIncrement.bind(this);\r\n    // }\r\n    // --------------------\r\n    //function that resets game by setting score=0 \r\n    // newGame(){\r\n    //     this.setState({count: 0})\r\n    // }\r\n    // =====================\r\n    handleIncrement() {\r\n        // We always use the setState method to update a component's state\r\n        this.setState({ count: this.state.count + 1 });\r\n        // alert(this.state.count)\r\n    }\r\n\r\n    clickPicture = cickedId => {\r\n        \r\n        // Arrange the pictures in a random manner\r\n        // const shuffledArray = this.shuffleArray(cards);\r\n        // this.setState({ cards: shuffledArray });\r\n        // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\r\n        if (this.state.clickedArray.includes(cickedId)) {\r\n          this.setState({\r\n            count: 0,\r\n            clickedArray: [],\r\n            message: \"Oops!! Game Over. Restart page or Click an image to start again!\"\r\n          });\r\n        } else {\r\n          this.setState({\r\n            clickedArray: this.state.clickedArray.concat([cickedId]),\r\n            count: this.state.count + 1,\r\n            message: \"YAY!!\"\r\n          });\r\n        }\r\n        // set topscore = score if score>topscore.\r\n        if (this.state.count > this.state.topScore) {\r\n          this.setState({ topScore: this.state.count });\r\n        }\r\n    };\r\n    \r\n//  setState for the geez\r\n    render() {\r\n        \r\n        var Cards = [];\r\n        // loops through the geezNums.json and renders images\r\n        for(let index=0;index< json.length ;index++){\r\n            Cards\r\n            .push(\r\n                <Geez \r\n                    image={json[index].image} \r\n                    name={json[index].name} \r\n                    label={json[index].label} \r\n                    // TODO map out onclick function in console\r\n                    onClick={this.clickPicture} \r\n                    key={json[index].id}\r\n                />\r\n            )\r\n        }\r\n        //using underscore.js for the shuffle functionality to shuffle the cards everytime on of them gets clicked\r\n        Cards = _.shuffle(Cards)\r\n        console.log(Cards)\r\n        return (\r\n            \r\n            <React.Fragment>\r\n                <Navbar>\r\n                {/* this sets the props object for count so that the navbar component gets props. (any) word is needed as well or there won't be a number! */}\r\n                \r\n                <div>\r\n                    <ul>\r\n                        score={this.state.count}\r\n                        message={this.state.message}\r\n                        topScore={this.state.topScore}\r\n                        \r\n                    </ul>\r\n                </div>\r\n                \r\n                </Navbar>\r\n                <Header />  \r\n                {/* the main tag keeps the images together and formats it in a way where they maintain their proportions */}\r\n                <main className=\"container\">\r\n                    {Cards}\r\n                </main>\r\n                <Footer />\r\n            </React.Fragment>\r\n        );\r\n        \r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}